'use client'
import {
  checkIsActive,
  loginWithRealm
} from '../torusComponents/serverFunctions'
import { Button, CircularProgress, Input } from '@nextui-org/react'
import { useRouter, useSearchParams } from 'next/navigation'
import React, { useEffect, useState } from 'react'
import logo from '../assets/favicon.ico'
import {
  Dropdown,
  DropdownMenu,
  DropdownTrigger,
  DropdownItem
} from '@nextui-org/react'
import axios from 'axios'
import picture from '../assets/google.png'
import pictures from '../assets/github.png'
import Image from 'next/image'
type Realm = {
  id: string
  name: string
}
import { MdOutlineRemoveRedEye } from 'react-icons/md'
import { IoEyeOffOutline } from 'react-icons/io5'


const fabricType = 'UF'


interface Props {
  appControl?: 'TP' | 'TM' | 'CG'
}

const LoginForm = ({ appControl = 'CG' }: Props) => {
  const [checkDetails, setCheckDetails] = useState(false)
  const [realmList, setRealmList] = useState<Realm[] | any[]>([])
  const [realmId, setRealmId] = useState<string>('')
  const [data, setData] = useState<any>({
    realm: '',
    username: '',
    password: '',
    client_id: '',
    client_secret: ''
  })
  const [errTenant, setErrTenant] = useState<any>()
  const [loading, setLoading] = useState(false)
  const routes = useRouter()
  const [isVisible, setIsVisible] = React.useState(false)
  const toggleVisibility = () => setIsVisible(!isVisible)
  const [error, setError] = useState<any>()
  const [queryData, setQueryData] = useState({})
  const searchparams = useSearchParams()

  useEffect(() => {
    var token = localStorage.getItem('token')
    var user: any = localStorage.getItem('user')
    if (token && user) {
      ;(async () => {
        const res = await checkIsActive(JSON.parse(user), JSON.parse(token))
        if (res.active == false) {
          localStorage.removeItem('token')
          localStorage.removeItem('user')
          setData({
            realm: '',
            username: '',
            password: '',
            client_id: '',
            client_secret: ''
          })
        }
        if (res.active == true) {
          routes.push('/<%= data[0] %>')
        }
      })()
    }
  }, [])

  useEffect(() => {
    if (searchparams.size) {
      ;['key', 'nodeId', 'upId', 'mode', 'nodeName'].forEach(key => {
        setQueryData(prev => ({ ...prev, [key]: searchparams.get(key) }))
      })
      if (searchparams.get('mode')) {
        //Todo call an New debug API call which is from PE team
        localStorage.setItem(
          'peData',
          JSON.stringify({
            key: searchparams.get('key'),
            mode: searchparams.get('mode'),
            upId: searchparams.get('upId'),
            nodeName: searchparams.get('nodeName'),
            nodeId: searchparams.get('nodeId')
          })
        )
      }
    }
    (async () => {
      try {
        const res = await axios.get('http://localhost:3002/keycloak/allRealm')
        res.status == 200 ? setRealmList(res.data) : setRealmList([])
      } catch (err) {
        console.log('Error occured')
      }
    })()
  }, [])

  async function Login() {
    if (
      data.realm &&
      data.username &&
      data.password &&
      data.client_id &&
      data.client_secret
    ) {
      setLoading(true)
      const res = await loginWithRealm(data)

      if (res.access_token) {
        setLoading(false)
        localStorage.setItem('token', JSON.stringify(res))
        localStorage.setItem('user', JSON.stringify(data))
        localStorage.setItem('isLogin', 'keyCloakTrue')
        setRealmId('')
       
        routes.push('/tenantProfile')
      } else {
        setError(res)
        setLoading(false)
      }
    } else {
      if (!data.email && !data.password) {
        setError('Fill all the details')
      }
      if (!data.realm) {
        setErrTenant('please select tenant')
      }
      setLoading(false)
      setCheckDetails(true)
    }
  }

  const handleSelectRealm = async (datas: any) => {
    setData({ ...data, realm: datas.name })
    setRealmId(datas.id)
    setErrTenant('')
  }

  const handleClientCredentials = async () => {
    try {
      if (realmId) {
        const res = await axios.get(
          `http://localhost:3002/keycloak/allClient/${realmId}`
        )
        if (res.data.length)
          setData({
            ...data,
            client_id: res.data[0].client_id,
            client_secret: res.data[0].secret
          })
      }
    } catch (err) {
      console.log(err)
    }
  }

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setError('')
    const { name, value } = e.target
    setData({ ...data, [name]: value })
  }

  useEffect(() => {
    if (realmId) {
      handleClientCredentials()
    }
  }, [realmId])

  const handleNavigateToRegister = () => {
    routes.push('/tenantProfile')
  }

  return (
    <div
      style={{
        background:
          'linear-gradient(90deg, rgba(17,15,18,1) 0%, rgba(110,68,139,1) 45%, rgba(117,59,94,1) 55%, rgba(24,24,23,1) 100%)'
      }}
      className='flex h-screen w-full flex-col items-center justify-center gap-2 overflow-y-auto'
    >
      <div className='flex gap-2 '>
        <Image className=' h-12 w-12 transition-all' src={logo} alt=''></Image>

        <h2 className='text-center text-4xl font-bold text-white'>Torus</h2>
      </div>

      <div className='my-1 flex w-[42%] flex-col gap-4 rounded-xl border-2 border-[#323B45] bg-slate-800/70 p-4 text-white shadow-md'>
        <div>
          <h2 className='text-2xl font-semibold '>Login</h2>
          <p className='text-[14px] text-slate-400'>
            By creating and account you agree to accept our Terms of Service and
            Privacy Policy Available in the links below.
          </p>
        </div>
        {appControl === 'TP' && (
          <div className='flex w-full flex-col items-center justify-center gap-3 '>
            <div className='grid grid-cols-2 gap-1'>
              <Button className='google-signin-button flex items-center rounded-md border border-black bg-white px-4 py-2'>
                <Image
                  src={pictures}
                  alt='GitHub logo'
                  width={20}
                  height={25}
                />
                <span className='ml-2 text-sm font-semibold text-black'>
                  Sign in with GitHub
                </span>
              </Button>
              <Button className='google-signin-button flex items-center rounded-md border border-black bg-white px-4 py-2'>
                <Image src={picture} alt='Google logo' width={30} height={35} />
                <span className='ml-2 text-sm font-semibold text-black'>
                  Sign in with Google
                </span>
              </Button>
            </div>
            <h2 className='text-[14px] text-slate-400'>Or continue with</h2>
          </div>
        )}

        <Dropdown className='w-[400px] border border-[#20252B]  p-0 '>
          <DropdownTrigger>
            <Button
              size='lg'
              variant='bordered'
              className={`border-2 border-[#323B45] ${
                checkDetails && !data.realm ? 'text-red-400' : 'text-white'
              }`}
            >
              {data.realm ? data.realm : 'Select Tenant'}
            </Button>
          </DropdownTrigger>
          <DropdownMenu
            aria-label='Link Actions'
            className=' rounded-sm text-white'
            variant='light'
            classNames={{
              base: 'bg-[#20252B] border-1 border-black'
            }}
          >
            {realmList.map((realm, id) => (
              <DropdownItem
                className=' text-white hover:bg-slate-200'
                key={id}
                onClick={() => handleSelectRealm(realm)}
              >
                {realm.name}
              </DropdownItem>
            ))}
          </DropdownMenu>
        </Dropdown>
        {errTenant && (
          <p className='text-center text-sm text-red-500'>{errTenant}</p>
        )}
        <Input
          type='text'
          label='Email or username'
          name='username'
          labelPlacement='outside'
          color={`${checkDetails && !data.username ? 'danger' : 'primary'}`}
          onChange={handleChange}
          value={data.username}
          classNames={{
            base: ' w-full h-6 my-2',
            label: ['text-xs  text-white focus-within:text-white'],
            inputWrapper: [
              'border border-slate-500/50',
              'text-white',
              'bg-transparent',
              'data-[hover=true]:bg-[#282551]',
              'data-[hover=true]:border-[#4435CF]',
              'focus-within:!bg-[#282551]',
              'focus-within:border-[#4435CF] border-2'
            ],
            innerWrapper: ['bg-transparent', 'boder-2 border-blue-100']
          }}
        />
        <Input
          type={isVisible ? 'text' : 'password'}
          label='Password'
          name='password'
          labelPlacement='outside'
          color={`${checkDetails && !data.password ? 'danger' : 'primary'}`}
          onChange={handleChange}
          value={data.password}
          endContent={
            <button
              className='focus:outline-none'
              type='button'
              onClick={toggleVisibility}
            >
              {isVisible ? (
                <IoEyeOffOutline className='pointer-events-none text-2xl text-default-400' />
              ) : (
                <MdOutlineRemoveRedEye className='pointer-events-none text-2xl text-default-400' />
              )}
            </button>
          }
          classNames={{
            base: ' w-full h-6 my-2 ',
            label: ['text-xs  text-white focus-within:text-white'],

            inputWrapper: [
              'border border-slate-500/50',
              'text-white',
              'bg-transparent',
              'data-[hover=true]:bg-[#282551]',
              'data-[hover=true]:border-[#4435CF]',
              'focus-within:!bg-[#282551]',
              'focus-within:border-[#4435CF] border-2'
            ],
            innerWrapper: ['bg-transparent', 'boder-2 border-blue-100']
          }}
        />
        <div className='flex-center flex justify-between'>
          <Button
            variant='bordered'
            color='primary'
            className='  border-2 border-[#323B45] text-white'
            onClick={() => routes.push('/resetPassword')}
          >
            Forgot password
          </Button>
          {error && <p className='my-3 mr-14 text-sm text-red-500'>{error}</p>}
          <Button
            onClick={Login}
            color='primary'
            variant='bordered'
            className='w-[10%]  border-2 border-[#323B45] text-white'
          >
            {loading ? <CircularProgress size='sm' /> : 'Sign in'}
          </Button>
        </div>
        {(appControl === 'CG' || appControl === 'TP') && (
          <div className='flex w-full items-center justify-center gap-3'>
            <p className='text-[14px] text-slate-400'>
              Don't have an account?{' '}
            </p>
            <span
              className='cursor-pointer rounded-full p-2 text-[14px] text-green-300 hover:bg-slate-400'
              onClick={() => routes.push('/register')}
            >
              Sign up
            </span>
          </div>
        )}
      </div>
    </div>
  )
}



export default LoginForm