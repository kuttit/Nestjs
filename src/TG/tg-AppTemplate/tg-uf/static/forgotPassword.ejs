"use client";
import { Button, Input } from "@nextui-org/react";
import Image from "next/image";
import logo from "@/app/assets/favicon.ico";
import React, { useEffect, useState } from "react";
import {
  Dropdown,
  DropdownMenu,
  DropdownTrigger,
  DropdownItem,
} from "@nextui-org/react";
import { useRouter } from "next/navigation";
type Realm = {
  id: string;
  name: string;
};
import { MdOutlineRemoveRedEye } from "react-icons/md";
import { IoEyeOffOutline } from "react-icons/io5";
import { toast } from "react-toastify";
import axios from "axios";

const ForgotPassword = () => {
  const [checkDetails, setCheckDetails] = useState(false);
  const [clientList, setClientList] = useState<Realm[] | any[]>([]);
  const [steps, setSteps] = useState<string>("0");
  const [email, setemail] = useState<string>("")
  const [otp, setotp] = useState<string>("")


  const [isVisible, setIsVisible] = React.useState(false);
  const [isVisibility, setIsVisibility] = React.useState(false);
  const [error, setError] = useState<any>();
  const [errTenant, setErrTenant] = useState<any>();

  const toggleVisibility = () => setIsVisible(!isVisible);
  const toggleVisible = () => setIsVisibility(!isVisibility);

  const [data, setData] = useState({
    client: "",
    email: "",
    otp: "",
  });

  const handleSelectRealm = async (datas: any) => {
    setData({ ...data, client: datas });
    setErrTenant("");
  };

  const getAllRealmOnDatabase = async () => {
    try {
      const res = await axios.get("http://localhost:3002/tp/getClientTenant");
      console.log(res)
      if (res.status == 200) {
        setClientList(res.data);
      } else {
        setClientList([]);
      }
    } catch (error) {
      toast.error("Error occured in fetching clients")
    }

  };

  useEffect(() => {
    getAllRealmOnDatabase();
  }, []);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setData({ ...data, [name]: value });
    setError("");
  };
  const [resetPassword, setResetPassword] = useState({
    password: "",
    confirmPassword: "",
  });
  const handlePassChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setResetPassword({ ...resetPassword, [name]: value });

  };

  const handleForgetPass = async () => {
    if (!data.client) {
      setErrTenant("please select client")
    } else if (!data.email) {
      setError("Please Provide Email id")
    } else if (data.client && data.email) {
      try {
        const res = await axios.post(`http://localhost:3002/tp/auth/resetotp`, {
          client: data.client,
          email: data.email,
        })
        console.log(res, "resssss")
        if (res.status == 201) {
          setSteps("1")
        }
      } catch (error) {
        const { response }: any = error;
        if (response.data) {
          toast.error(response.data.errorDetails)
          setCheckDetails(true);
        }
      }
    }
  };


  const isOtpValid = async () => {
    try {
      if (!data.otp) {
        setError("Please Enter otp");
      } else {
        const res = await axios.post(`http://localhost:3002/tp/auth/verifyPasswordOtp`, {
          email: data.email,
          client: data.client,
          otp: data.otp,
        });
        if (res.status == 201) {
          setSteps("2")
        } else {
          setError("Invalid OTP");
        }
      }
    } catch (error) {
      console.error("Error in OTP verification:", error);
      setError("Error verifying OTP , please try again");
    }
  };


  const router = useRouter();

  const handleChangePassword = async () => {
    if (!resetPassword.password || !resetPassword.confirmPassword) {
      setError("Enter Password");
    } else if (resetPassword.password !== resetPassword.confirmPassword) {
      setError("Password Mismatched");
    } else {
      try {
        setError('')
        const res = await axios.post(`http://localhost:3002/tp/auth/changepassword`,
          { client: data.client, username: data.email, password: resetPassword.password }
        );
        if (res.status == 201) {
          toast.success("Password Changed Successfully");
          router.push("/");
        } else {
          setError("Error Changing the password");
        }
      } catch (error) {
        setError("An error occurred while resetting the password");
      }
    }
  };

  return (
    <div
      style={{
        background:
          "linear-gradient(90deg, rgba(17,15,18,1) 0%, rgba(110,68,139,1) 45%, rgba(117,59,94,1) 55%, rgba(24,24,23,1) 100%)",
      }}
      className="flex flex-col  w-full h-screen justify-center items-center gap-2 overflow-y-auto"
    >
      <div className="flex gap-2">
        <Image
          className=" w-12 h-12 my-3 transition-all"
          src={logo}
          alt=""
        ></Image>

        <h2 className="text-center my-3 font-bold text-4xl text-white">
          Torus
        </h2>
      </div>

      {(() => {
        switch (steps) {
          case "0":
            return (
              <div className="w-[40%] h-[40%] bg-slate-800/70 text-center text-white rounded-lg ">
                <Dropdown className="w-[400px] border border-[#20252B]  p-0 ">
                  <DropdownTrigger>
                    <Button
                      size="lg"
                      variant="bordered"
                      className={`border-2 border-[#323B45] mx-44 my-3 ${checkDetails && !data.client
                        ? "text-red-400"
                        : "text-white"
                        }`}
                    >
                      {data.client ? data.client : "Select Client"}
                    </Button>
                  </DropdownTrigger>
                  <DropdownMenu
                    aria-label="Link Actions"
                    className=" text-white rounded-sm"
                    variant="light"
                    classNames={{
                      base: "bg-[#20252B] border-1 border-black",
                    }}
                  >
                    {clientList.map((realm) => (
                      <DropdownItem
                        className=" text-white hover:bg-slate-200"
                        onClick={() => handleSelectRealm(realm)}
                      >
                        {realm}
                      </DropdownItem>
                    ))}
                  </DropdownMenu>
                </Dropdown>
                {errTenant && (
                  <p className="text-red-500 text-center text-sm">
                    {errTenant}
                  </p>
                )}
                <Input
                  className="w-[90%] my-8 mx-7 bg-transparent text-white"
                  name="email"
                  label="Email"
                  labelPlacement="outside"
                  color={`${checkDetails ? "danger" : "primary"}`}
                  onChange={handleChange}
                  classNames={{
                    base: " w-full h-6 my-2",
                    label: [
                      "text-xs text-white focus-within:text-white",
                    ],

                    inputWrapper: [
                      "border border-slate-500/50",
                      "text-white",
                      "bg-transparent",
                      "data-[hover=true]:bg-[#282551]",
                      "data-[hover=true]:border-[#4435CF]",
                      "focus-within:!bg-[#282551]",
                      "focus-within:border-[#4435CF] border-2",
                    ],
                    innerWrapper: ["bg-transparent", "boder-2 border-blue-100"],
                  }}
                ></Input>
                {error && <p className="text-red-500 text-sm">{error}</p>}
                <Button
                  onClick={() => {
                    handleForgetPass();
                  }}
                  color="primary"
                  className=" my-5 w-[90%] text-end"
                  type="submit"
                >
                  submit
                </Button>
              </div>
            );
          case "1":
            return (
              <div className="w-[40%] h-[35%] bg-slate-800/70 text-center text-white">
                <div className="my-10">
                  <Input
                    className="w-[90%] mx-7  bg-transparent text-white"
                    name="otp"
                    label="Enter Otp"
                    labelPlacement="outside"
                    color={`${checkDetails ? "danger" : "primary"}`}
                    onChange={handleChange}
                    classNames={{
                      base: " w-full",
                      label: [
                        "text-xs text-white focus-within:text-white",
                      ],

                      inputWrapper: [
                        "border border-slate-500/50",
                        "text-white",
                        "bg-transparent",
                        "data-[hover=true]:bg-[#282551]",
                        "data-[hover=true]:border-[#4435CF]",
                        "focus-within:!bg-[#282551]",
                        "focus-within:border-[#4435CF] border-2",
                      ],
                      innerWrapper: [
                        "bg-transparent",
                        "boder-2 border-blue-100",
                      ],
                    }}
                  ></Input>
                  {error && (
                    <p className="text-red-500 my-4 text-sm">{error}</p>
                  )}
                </div>
                <Button
                  onClick={() => isOtpValid()}
                  color="primary"
                  className="w-[90%] text-end"
                  type="submit"
                >
                  submit
                </Button>
              </div>
            );
          case "2":
            return (
              <div className="p-4 my-4 rounded-xl shadow-md w-[42%] flex flex-col gap-4 border-2 border-[#323B45]  text-white bg-slate-800/70">
                <h2 className="text-center text-lg text-blue-500">
                  Reset password
                </h2>
                <Input
                  type={isVisible ? "text" : "password"}
                  label="password"
                  labelPlacement="outside"
                  color={`${checkDetails ? "danger" : "primary"}`}
                  name="password"
                  value={resetPassword.password}
                  onChange={handlePassChange}
                  endContent={
                    <button
                      className="focus:outline-none"
                      type="button"
                      onClick={toggleVisibility}
                    >
                      {isVisible ? (
                        <IoEyeOffOutline className="text-2xl text-default-400 pointer-events-none" />
                      ) : (
                        <MdOutlineRemoveRedEye className="text-2xl text-default-400 pointer-events-none" />
                      )}
                    </button>
                  }
                  classNames={{
                    base: " w-full h-6 my-2 ",
                    label: [
                      "text-xs  text-white focus-within:text-white",
                    ],

                    inputWrapper: [
                      "border border-slate-500/50",
                      "text-white",
                      "bg-transparent",
                      "data-[hover=true]:bg-[#282551]",
                      "data-[hover=true]:border-[#4435CF]",
                      "focus-within:!bg-[#282551]",
                      "focus-within:border-[#4435CF] border-2",
                    ],
                    innerWrapper: ["bg-transparent", "boder-2 border-blue-100"],
                  }}
                ></Input>
                <Input
                  type={isVisibility ? "text" : "password"}
                  label="ConfirmPassword"
                  name="confirmPassword"
                  labelPlacement="outside"
                  color={`${checkDetails ? "danger" : "primary"}`}
                  value={resetPassword.confirmPassword}
                  onChange={handlePassChange}
                  endContent={
                    <button
                      className="focus:outline-none"
                      type="button"
                      onClick={toggleVisible}
                    >
                      {isVisibility ? (
                        <IoEyeOffOutline className="text-2xl text-default-400 pointer-events-none" />
                      ) : (
                        <MdOutlineRemoveRedEye className="text-2xl text-default-400 pointer-events-none" />
                      )}
                    </button>
                  }
                  classNames={{
                    base: " w-full h-6 my-2 ",
                    label: [
                      "text-xs  text-white focus-within:text-white",
                    ],

                    inputWrapper: [
                      "border border-slate-500/50",
                      "text-white",
                      "bg-transparent",
                      "data-[hover=true]:bg-[#282551]",
                      "data-[hover=true]:border-[#4435CF]",
                      "focus-within:!bg-[#282551]",
                      "focus-within:border-[#4435CF] border-2",
                    ],
                    innerWrapper: ["bg-transparent", "boder-2 border-blue-100"],
                  }}
                ></Input>
                {error && (
                  <p className="text-red-500 text-center text-sm">{error}</p>
                )}
                <Button
                  onClick={handleChangePassword}
                  color="primary"
                  variant="bordered"
                  className="w-full my-5 text-white border-2 border-[#323B45] bg-blue-500"
                >
                  {/* {" "} */}
                  submit
                </Button>
              </div>
            );
          default:
            break;
        }
      })()}
    </div>
  );
};

export default ForgotPassword;
