'use client'
import { useCallback, useEffect, useMemo, useState } from 'react'
import {
  Table,
  TableHeader,
  TableColumn,
  TableBody,
  TableRow,
  TableCell,
  Input,
  Pagination,
  SortDescriptor,
  Spinner
} from '@nextui-org/react'

import { <%= data.tname %>, columns, renderCell } from './columns'
import { SearchIcon } from '../components/icons'
import <%= data.tname %>CreateModal from './<%= data.tname %>CreateModal'

export default function <%= data.tname %>Table() {
  const [<%= data.tname.toLowerCase() %>s, set<%= data.tname %>s] = useState<<%= data.tname %>[]>([])
  const [filterValue, setFilterValue] = useState('')
  const hasSearchFilter = Boolean(filterValue)
  const [refetch, setRefetch] = useState(false)

  useEffect(() => {
    fetch(process.env.NEXT_PUBLIC_API_URL + '<%= data.tname.toLowerCase() %>')
      .then(res => res.json())
      .then(res => {
        set<%= data.tname %>s(res)
      })
  }, [refetch])

  const filteredItems = useMemo(() => {
    let filtered<%= data.tname %>s = [...<%= data.tname.toLowerCase() %>s]

    if (hasSearchFilter) {
      filtered<%= data.tname %>s = filtered<%= data.tname %>s.filter(
        <%= data.tname.toLowerCase() %> =>
        <%= data.tname.toLowerCase() %>.<%= relation %> &&
        <%= data.tname.toLowerCase() %>.<%= relation %>.toLowerCase().includes(filterValue.toLowerCase())
      )
    }
    return filtered<%= data.tname %>s
  }, [<%= data.tname.toLowerCase() %>s, filterValue, hasSearchFilter])

  const rowsPerPage = 10
  const [page, setPage] = useState(1)
  const pages = Math.ceil(filteredItems.length / rowsPerPage)

  const items = useMemo(() => {
    const start = (page - 1) * rowsPerPage
    const end = start + rowsPerPage

    return filteredItems.slice(start, end)
  }, [page, filteredItems])

  const [sortDescriptor, setSortDescriptor] = useState<SortDescriptor>({
    column: '<%= relation %>',
    direction: 'ascending'
  })

  const sortedItems = useMemo(() => {
    return [...items].sort((a: <%= data.tname %>, b: <%= data.tname %>) => {
      const first = a[sortDescriptor.column as keyof <%= data.tname %>] as any
      const second = b[sortDescriptor.column as keyof <%= data.tname %>] as any
      const cmp = first < second ? -1 : first > second ? 1 : 0

      return sortDescriptor.direction === 'descending' ? -cmp : cmp
    })
  }, [sortDescriptor, items])

  const onSearchChange = useCallback((value?: string) => {
    if (value) {
      setFilterValue(value)
      setPage(1)
    } else {
      setFilterValue('')
    }
  }, [])

  const onClear = useCallback(() => {
    setFilterValue('')
    setPage(1)
  }, [])

  const topContent = useMemo(() => {
    return (
      <div className='flex flex-col gap-4'>
        <div className='flex items-end justify-between gap-3'>
          <Input
            isClearable
            className='w-full sm:max-w-[44%]'
            placeholder='Search by name...'
            startContent={<SearchIcon />}
            value={filterValue}
            onClear={() => onClear()}
            onValueChange={onSearchChange}
          />
          <div color='primary' className='flex h-14 gap-1'>
            <<%= data.tname %>CreateModal setRefetch={setRefetch} />
          </div>
        </div>
      </div>
    )
  }, [filterValue, onSearchChange, onClear])

  return (
    <Table
      aria-label='<%= data.tname %>s table'
      topContent={topContent}
      topContentPlacement='outside'
      bottomContent={
        <div className='flex w-full justify-center'>
          <Pagination
            isCompact
            showControls
            showShadow
            color='primary'
            page={page}
            total={pages}
            onChange={page => setPage(page)}
          />
        </div>
      }
      bottomContentPlacement='outside'
      sortDescriptor={sortDescriptor}
      onSortChange={setSortDescriptor}
      classNames={{
        wrapper: 'min-h-[222px]'
      }}
    >
      <TableHeader columns={columns}>
        {column => (
          <TableColumn
            key={column.key}
            <%_ for (let i = 0; i < data.columns.length; i++) { _%>
            {...(column.key === '<%=data.columns[i].cname %>' ? { allowsSorting: true } : {})}
            <%_ } _%>
          >
            {column.label}
          </TableColumn>
        )}
      </TableHeader>
      <TableBody items={sortedItems} emptyContent={<Spinner />}>
        {<%= data.tname.toLowerCase() %> => (
          <TableRow key={<%= data.tname.toLowerCase() %>.id}>
            {columnKey => (
              <TableCell>{renderCell(<%= data.tname.toLowerCase() %>, columnKey, setRefetch)}</TableCell>
            )}
          </TableRow>
        )}
      </TableBody>
    </Table>
  )
}
