'use client'
import { useState } from 'react'
import {
  Modal,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  Button,
  useDisclosure,
  Input
} from '@nextui-org/react'
import { EditIcon } from './icons'
import { IoMdAddCircle } from 'react-icons/io'

const <%=data.tname%>CreateModal = ({ setRefetch }: { setRefetch: any }) => {
  const { isOpen, onOpen, onOpenChange } = useDisclosure()
  const [formvalue, setFormVal] = useState({})

  async function post(e: any) {
    e.preventDefault()

    const res = await fetch(process.env.NEXT_PUBLIC_API_URL + '<%=data.tname.toLowerCase()%>', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formvalue)
    })
    if (res) {
      setRefetch((prev: boolean) => !prev)
    }
  }

  const handleChange = (e: any) => {
    if (e.target.type == 'number') {
      setFormVal(prev => ({
        ...prev,
        [e.target.name]: Number(e.target.value)
      }))
    } else {
      setFormVal(prev => ({ ...prev, [e.target.name]: e.target.value }))
    }
  }

  return (
    <>
      <Button onClick={onOpen} color='primary' className='flex h-14 gap-1'>
        <IoMdAddCircle size={20} />
        <span className='font-bold'>Add New</span>
      </Button>
      <Modal isOpen={isOpen} onOpenChange={onOpenChange} placement='top-center'>
        <ModalContent>
          {onClose => (
            <>
              <ModalHeader className='flex flex-col gap-1'>Log in</ModalHeader>
              <ModalBody>
                <%_for(let i=0;i<data.columns.length;i++){_%>
                  <%_if(data.columns[i].contraints.includes('@default')||data.columns[i].contraints.includes('@updatedAt')){_%>
                  <%_}else{_%>
                <Input
                  autoFocus
                  label='<%=data.columns[i].labelName%>'
                  name='<%=data.columns[i].cname%>'
                  placeholder='Enter your <%=data.columns[i].labelName%>'
                  variant='bordered'
                  <%_ if (data.columns[i].datatype.includes('?') ) { _%>
                  isRequired={false}                    
                     <%_} else { _%>   
                  isRequired={true}
                    <%_} _%>
                  <%_ if (data.columns[i].datatype.includes('Int') || data.columns[i].datatype.includes('DateTime')) { _%>
                  type='number'
                  <%_ } else if (data.columns[i].datatype.includes('String')) { _%>
                  type='string'
                  <%_ } else if (data.columns[i].datatype.includes('Boolean')) { _%>
                  type='boolean'
                   <%_} else { _%> <%= data.columns[i].datatype %>    
                  <%_} _%>
                  onChange={e => {
                    handleChange(e)
                  }}
                />
                <%_}_%>
                <%_}_%>
              </ModalBody>
              <ModalFooter>
                <Button color='danger' variant='flat' onPress={onClose}>
                  Close
                </Button>
                <Button
                  type='submit'
                  color='primary'
                  onPress={onClose}
                  onClick={post}
                >
                  Post
                </Button>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>
    </>
  )
}

export default <%=data.tname%>CreateModal
