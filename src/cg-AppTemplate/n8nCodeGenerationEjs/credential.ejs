import {
	IAuthenticateGeneric, 
	<%_ try{ _%>
    <%_ if(data.CredentialDetails.test) { _%>
  ICredentialTestRequest, 
	<%_ }else{_%>
    <%_ } _%>
    <%_ }catch(error){ _%>
    <%_ } _%>
  ICredentialType,
	INodeProperties
} from 'n8n-workflow';

export class <%= relation %>CredentialsApi implements ICredentialType {
    name = '<%= data.CredentialDetails.name %>';
    displayName = '<%= data.CredentialDetails.displayName %>';
    <%_ try{ _%>
        <%_ if(data.CredentialDetails.documentationUrl) { _%>
    documentationUrl = '<%= data.CredentialDetails.documentationUrl %>';
    <%_ }else{_%>
        <%_ } _%>
        <%_ }catch(error){ _%>
        <%_ } _%>
    properties : INodeProperties[] = [
        <%_ for(var i=0;i< data.CredentialDetails.properties.length;i++) { _%>
        {
            displayName: '<%= data.CredentialDetails.properties[i].displayName %>',
            name: '<%= data.CredentialDetails.properties[i].name %>',
            type: '<%= data.CredentialDetails.properties[i].type %>',
            <%_ if(data.CredentialDetails.properties[i].typeOptions) { _%>
            typeOptions: {
                password: <%= data.CredentialDetails.properties[i].typeOptions.password %>,
            },
            <%_ } _%>
            default: '<%= data.CredentialDetails.properties[i].default %>'
        },
        <%_ } _%>
    ];
    authenticate : IAuthenticateGeneric = {
        type: '<%= data.CredentialDetails.authenticate.type %>',
        properties: {
            <%_ for(var i=0;i< data.CredentialDetails.authenticate.properties.length;i++) { _%>
            <%_ try{ _%>
            <%_ if(data.CredentialDetails.authenticate.properties[i].headers) { _%>
            headers: {
                Authorization:'<%= data.CredentialDetails.authenticate.properties[i].headers.Authorization %>'
            },
            <%_ } else{_%>
            <%_ } _%>
            <%_ } catch(error){ _%>
            <%_ } _%>
            <%_ try{ _%>
            <%_ if(data.CredentialDetails.authenticate.properties[i].auth) { _%>
            auth: {
                <%_ for(var j=0;j< data.CredentialDetails.properties.length;j++) { _%>
                <%= data.CredentialDetails.properties[j].name %>: '= {{ $credentials.<%= data.CredentialDetails.properties[j].name %> }}',
				<%_ } _%>
			},
			<%_ } else{_%>
				<%_ } _%>
			<%_ }catch(error){ _%>
				<%_ } _%>
			<%_ try{ _%>
			<%_ if(data.CredentialDetails.authenticate.properties[i].qs){ _%>
			qs: {
				<%= Object.keys(data.CredentialDetails.authenticate.properties[i].qs).toString() _%>:'<%= data.CredentialDetails.authenticate.properties[i].qs[Object.keys(data.CredentialDetails.authenticate.properties[i].qs).toString()] %>',
			},
			<%_ }else{ _%>
				<%_ } _%>
				<%_ }catch(error){ _%>
					<%_ } _%>
		<%_ } _%>
		}
	};
	<%_ try{ _%>
		<%_ if(data.CredentialDetails.test) { _%>
	test: ICredentialTestRequest = {
		request: {
			baseURL: '<%= data.CredentialDetails.test.request.baseURL %>',
			url: '<%= data.CredentialDetails.test.request.url %>',
		},
	};
	<%_ }else{_%>
		<%_ } _%>
		<%_ }catch(error){ _%>
			<%_ } _%>
}